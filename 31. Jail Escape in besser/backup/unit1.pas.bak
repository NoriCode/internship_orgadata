unit Unit1;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, StdCtrls,LcLtype, Math,
  ExtCtrls;

type

  { TForm1 }


  TForm1 = class(TForm)
    Label1: TLabel;
    Label10: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Timer1: TTimer;
    Timer2: TTimer;
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure MaperstellenohneTexturen;
    procedure texturenladen;
    procedure bausteinzuordnung;
    procedure level1;
    procedure level2;
    procedure level3;
    procedure level4;
    procedure level5;
    procedure spielerladen;
    procedure Timer1Timer(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
  private
    { private declarations }
    spielerposition, ziel, level, bausteinwahl, powerup, welchespowerup:integer;
    s: String;
    Daten: TextFile;
    marker : array of integer;
    baustein: array of string;
    mapteil: array of TImage;
  public
    { public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}


{ TForm1 }

procedure Tform1.MaperstellenohneTexturen; //Alle Felder erstellen und Rand mit Texturen füllen
var
  links, oben, i :integer;
begin
  setlength(mapteil, 401);
  links := 0;
  oben := 0;

  for i := 0 to high(mapteil) do
  begin
    mapteil[i] := timage.Create(self);
    mapteil[i].parent := self;
    mapteil[i].Width := 25;
    mapteil[i].Height := 25;
    mapteil[i].tag := 0;

    if (i mod 20 = 0) and (i > 0) then
    begin
      oben := oben+25;
      links := 0;
    end;

    if (i < 20) or (i > 379) then
    begin
      mapteil[i].Picture.LoadFromFile('blocko.png');
      mapteil[i].tag := 1;
      marker[i+1] := 1;
    end;

    if (mapteil[i].tag <> 1) then
    begin
       mapteil[i].Picture.LoadFromFile('boden.png');
       mapteil[i].tag := 0;
       marker[i+1] := 0;
    end;

    mapteil[i].left := links;
    mapteil[i].top := oben;

    links := links+25;
    //mapteil[i].visible := false;
  end;
end;

procedure TForm1.texturenladen;  //texturen laden
var
  i,tester:integer;
  powerupstart, zielplatz:boolean;
begin
  powerupstart := false;
  zielplatz := false;
  for i:= 2 to 400 do
  begin
    if marker[i] =  1 then
    begin
       mapteil[i-1].Picture.LoadFromFile('blocko.png');
       mapteil[i-1].tag := 1;

       tester:=randomrange(1, 100);
    end;
    if  marker[i] = 0 then
    begin
      mapteil[i-1].Picture.LoadFromFile('boden.png');
      mapteil[i-1].tag := 0;

      if (powerupstart = false)then
      begin
        tester:=randomrange(1, 100);
        if (tester mod 5 = 0) and (i > 100)  then
        begin
          powerup:= i-1;
          mapteil[i-1].Picture.LoadFromFile('powerup.png');
          mapteil[i-1].tag := 0;
          powerupstart := true;
        end;
      end;
    end;
  end;
end;

procedure TForm1.bausteinzuordnung;  //welcher baustein für 3x3 feld
var
  i,tester:integer;
begin
  tester:= 10;
  for i:=22 to 337 do
  begin
    if marker[i] > 1 then
    begin
      bausteinwahl:=random(tester);
      case bausteinwahl of
         1:
           begin
             marker[i]:= 0;
                marker[i+1]:= 0;
                marker[i+2]:= 0;
                marker[i+20]:= 0;
                marker[i+21]:= 1;
                marker[i+22]:= 1;
                marker[i+40]:= 0;
                marker[i+41]:= 1;
                marker[i+42]:= 0;
           end;
         2:
           begin
             marker[i]:= 0;
                marker[i+1]:= 0;
                marker[i+2]:= 0;
                marker[i+20]:= 1;
                marker[i+21]:= 1;
                marker[i+22]:= 0;
                marker[i+40]:= 0;
                marker[i+41]:= 1;
                marker[i+42]:= 0;
           end;
         3:
           begin
             marker[i]:= 0;
                marker[i+1]:= 1;
                marker[i+2]:= 0;
                marker[i+20]:= 0;
                marker[i+21]:= 1;
                marker[i+22]:= 1;
                marker[i+40]:= 0;
                marker[i+41]:= 0;
                marker[i+42]:= 0;

           end;
         4:
           begin
             marker[i]:= 0;
                marker[i+1]:= 1;
                marker[i+2]:= 0;
                marker[i+20]:= 1;
                marker[i+21]:= 1;
                marker[i+22]:= 0;
                marker[i+40]:= 0;
                marker[i+41]:= 0;
                marker[i+42]:= 0;
           end;
         5:
           begin
             marker[i]:= 0;
             marker[i+1]:= 0;
             marker[i+2]:= 0;
             marker[i+20]:= 1;
             marker[i+21]:= 1;
             marker[i+22]:= 1;
             marker[i+40]:= 0;
             marker[i+41]:= 1;
             marker[i+42]:= 0;
           end;
         6:
           begin
             marker[i]:= 0;
             marker[i+1]:= 1;
             marker[i+2]:= 0;
             marker[i+20]:= 1;
             marker[i+21]:= 1;
             marker[i+22]:= 0;
             marker[i+40]:= 0;
             marker[i+41]:= 1;
             marker[i+42]:= 0;
           end;
         7:
           begin
             marker[i]:= 0;
             marker[i+1]:= 1;
             marker[i+2]:= 0;
             marker[i+20]:= 1;
             marker[i+21]:= 1;
             marker[i+22]:= 1;
             marker[i+40]:= 0;
             marker[i+41]:= 0;
             marker[i+42]:= 0;
           end;
         8:
           begin
             marker[i]:= 0;
             marker[i+1]:= 1;
             marker[i+2]:= 0;
             marker[i+20]:= 0;
             marker[i+21]:= 1;
             marker[i+22]:= 1;
             marker[i+40]:= 0;
             marker[i+41]:= 1;
             marker[i+42]:= 0;
           end;
      end;
    end;
    if (i mod 20 = 0) or (i > 379) or (i<=20) or (i mod 20 = 1) then
    begin
       marker[i]:=1;
    end;
  end;
end;

procedure TForm1.level1;  //level 1
var
  i:integer;
begin
  ziel := 378;

  AssignFile(Daten,'level1.txt');
  reset(daten);

  for i := 1 to 400 do
  begin
    ReadLn(Daten,s);
    marker[i]:= StrtoInt(s);
  end;

  texturenladen;
  CloseFile(Daten);
  mapteil[ziel].Picture.LoadFromFile('bodenziel.png');
  mapteil[ziel].tag := 0;
  Form1.Caption:='Labyrinth Tower Level ' +InttoStr(level);
  Label10.Caption:='Labyrinth Tower Level ' +InttoStr(level);
end;

procedure TForm1.level2;  //level 2
var
  i:integer;
begin
  ziel := 50;

  AssignFile(Daten,'level2.txt');
  reset(daten);

  for i := 1 to 400 do
  begin
    ReadLn(Daten,s);
    marker[i]:= StrtoInt(s);
  end;

  texturenladen;
  CloseFile(Daten);
  mapteil[ziel].Picture.LoadFromFile('bodenziel.png');
  mapteil[ziel].tag := 0;
  mapteil[spielerposition].Picture.LoadFromFile('spielerhoch.png');
  mapteil[spielerposition].tag := 0;
end;

procedure TForm1.level3;  //level 3
var
  i:integer;
begin
  ziel := 211;

  AssignFile(Daten,'level3.txt');
  reset(daten);

  for i := 1 to 400 do
  begin
    ReadLn(Daten,s);
    marker[i]:= StrtoInt(s);
  end;

  texturenladen;
  CloseFile(Daten);
  mapteil[ziel].Picture.LoadFromFile('bodenziel.png');
  mapteil[ziel].tag := 0;
  mapteil[spielerposition].Picture.LoadFromFile('spielerlinks.png');
  mapteil[spielerposition].tag := 0;
end;

procedure TForm1.level4;  //level 4
var
  i:integer;
begin
  ziel := 377;

  AssignFile(Daten,'level4.txt');
  reset(daten);

  for i := 1 to 400 do
  begin
    ReadLn(Daten,s);
    marker[i]:= StrtoInt(s);
  end;

 texturenladen;
  CloseFile(Daten);
  mapteil[ziel].Picture.LoadFromFile('bodenziel.png');
  mapteil[ziel].tag := 0;
  mapteil[spielerposition].Picture.LoadFromFile('spielerlinks.png');
  mapteil[spielerposition].tag := 0;
end;

procedure Tform1.level5;  //level 5 und höher
var
  i:integer;
  machbar:boolean;
begin
  ziel:=randomrange(21,338);
  while (ziel mod 20 = 0) or ((ziel+1) mod 20 = 0) or (ziel = spielerposition) do
  begin
     ziel:=randomrange(21,338);
  end;

  for i:=1 to 400 do
  begin
    if (i mod 20 = 0) or (i > 379) or (i<=20) or (i mod 20 = 1) then
    begin
      marker[i]:=1;
    end
    else
    begin
      marker[i]:=2;
    end;
  end;
  bausteinzuordnung;

  texturenladen;
  mapteil[ziel].Picture.LoadFromFile('bodenziel.png');
  mapteil[ziel].tag := 0;
  mapteil[spielerposition].Picture.LoadFromFile('spielerlinks.png');
  mapteil[spielerposition].tag := 0;
  Form1.Caption:='Labyrinth Tower Level ' +InttoStr(level);
end;

procedure Tform1.spielerladen;  //spieler erstellen
var
  a :integer;
begin
  a:=21;
  mapteil[a].Picture.LoadFromFile('spielerrunter.png');
  mapteil[a].tag := 0;
  marker[a+1] := 0;
  spielerposition := a;
end;

procedure TForm1.Timer1Timer(Sender: TObject); //ist spieler im ziel und "lichtkegel"
var
  i, tester, powerupstopp:integer;
begin
  mapteil[spielerposition-21].visible := true;
  mapteil[spielerposition-20].visible := true;
  mapteil[spielerposition-19].visible := true;
  mapteil[spielerposition-1].visible := true;
  mapteil[spielerposition].visible := true;
  mapteil[spielerposition+1].visible := true;
  mapteil[spielerposition+19].visible := true;
  mapteil[spielerposition+20].visible := true;
  mapteil[spielerposition+21].visible := true;

  if (spielerposition = ziel) then
  begin
     level := level+5;
     Form1.Caption:='Labyrinth Tower Level ' +InttoStr(level);
     Label10.Caption:='Labyrinth Tower Level ' +InttoStr(level);

     spielerposition := ziel;
     welchespowerup := 0;
     timer2.enabled := true;
     for i:=0 to 400 do
     begin
       mapteil[i].visible := false;
     end;

     for i:=0 to high(mapteil) do
     begin
       mapteil[i].tag := 0
     end;
     MaperstellenohneTexturen;
     //texturenladen;
     case level of
        2:level2;
        3:level3;
        4:level4;
        5..1000:level5;
     end;
  end;

  if (spielerposition = powerup) then
  begin
    powerup:=500;
    tester:= random(100);
    //tester:= 10;
    if tester mod 10 = 0 then
    begin
      welchespowerup := 3;
    end
    else if tester mod 21 = 0 then
    begin
      welchespowerup := 2;
    end
    else
    begin
      welchespowerup := 1;
    end;
  end;

  if welchespowerup = 1 then
  begin
    if spielerposition-42 > 1 then
       mapteil[spielerposition-42].visible := true;
    if spielerposition-41 > 1 then
       mapteil[spielerposition-41].visible := true;
    if spielerposition-40 > 1 then
       mapteil[spielerposition-40].visible := true;
    if spielerposition-39 > 1 then
       mapteil[spielerposition-39].visible := true;
    if spielerposition-38 > 1 then
       mapteil[spielerposition-38].visible := true;
    if spielerposition-22 > 1 then
       mapteil[spielerposition-22].visible := true;
    if spielerposition-18 > 1 then
       mapteil[spielerposition-18].visible := true;
    if spielerposition-2 > 1 then
       mapteil[spielerposition-2].visible := true;

    if spielerposition+2 > 1 then
       mapteil[spielerposition+2].visible := true;
    if spielerposition+18 < 400 then
       mapteil[spielerposition+18].visible := true;
    if spielerposition+22 < 400 then
       mapteil[spielerposition+22].visible := true;
    if spielerposition+38 < 400 then
       mapteil[spielerposition+38].visible := true;
    if spielerposition+39 < 400 then
       mapteil[spielerposition+39].visible := true;
    if spielerposition+40 < 400 then
       mapteil[spielerposition+40].visible := true;
    if spielerposition+41 < 400 then
       mapteil[spielerposition+41].visible := true;
    if spielerposition+42< 400 then
       mapteil[spielerposition+42].visible := true;

    //powerupstopp := powerupstopp +1;
    powerupstopp := gettickcount;
    if powerupstopp mod 5000 = 0 then
    begin
      welchespowerup := 0;
    end;
  end
  else if welchespowerup = 2 then
  begin
    mapteil[ziel].visible := true;
  end
  else if welchespowerup = 3 then
  begin
     timer2.enabled := false;
  end;
end;

procedure TForm1.Timer2Timer(Sender: TObject); //alles wieder dunkel
var
  i:integer;
begin
  for i:=0 to 400 do
  begin
    mapteil[i].visible := false;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject); //spielstart
var
  i:integer;
begin
  Randomize;
  level :=1;
  form1.color := clblack;
  setlength (baustein, 400);
  setlength(marker, 401);

  //for i:=1 to 401 do
  //begin
  //  marker[i] := 3;
  //end;

  MaperstellenohneTexturen;
  Level1;
  spielerladen;
end;

procedure TForm1.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState); //steuerung
var
  i:integer;
begin
 if (key = vk_up) then //hoch
  begin
     if (mapteil[spielerposition-20].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition-20;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerhoch.png');
  end;

 if (key = vk_right) then //rechts
  begin
     if (mapteil[spielerposition+1].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition+1;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerrechts.png');
  end;

 if (key = vk_down) and (mapteil[spielerposition+20].tag = 0) then //runter
  begin
     if (mapteil[spielerposition+20].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition+20;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerrunter.png');
  end;

 if (key = vk_left) then //links
  begin
     if (mapteil[spielerposition-1].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition-1;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerlinks.png');
  end;

 if (key = vk_q) and (spielerposition-21 > 10)then
 begin
    if (mapteil[spielerposition-21].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition-21;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerhoch.png');
 end;

 if (key = vk_e) then
 begin
    if (mapteil[spielerposition-19].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition-19;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerhoch.png');
 end;

 if (key = vk_a) then
 begin
    if (mapteil[spielerposition+19].tag = 0) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition+19;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerrunter.png');
 end;

 if (key = vk_d) then
 begin
    if (mapteil[spielerposition+21].tag = 0) and (spielerposition+21 < 400) then
     begin
        mapteil[spielerposition].Picture.LoadFromFile('boden.png');
        spielerposition:= spielerposition+21;
     end;

     mapteil[spielerposition].Picture.LoadFromFile('spielerrunter.png');
 end;

 if (key = vk_tab) then
 begin
   mapteil[ziel].visible := true;
 end;
 if (key = vk_space) then
 begin
   if timer2.enabled = true then
   begin
   timer2.enabled := false;
   for i:=0 to 400 do
     begin
       mapteil[i].visible := true;
     end;
   end
   else
   begin
     timer2.enabled := true;
   end;

 end;
end;

end.

